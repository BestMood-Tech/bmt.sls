import { ErrorStatusCode, HttpError } from '@errors/http/http-error';
import { RuntimeError } from '@errors/runtime/runtime-error';
import { log } from '@helper/logger';
import { format } from '@redtea/format-axios-error';
import { AxiosError } from 'axios';

export interface AppError {
  statusCode: number;
  name: string;
  message: string;
}

export function errorHandler(caughtError: Error | HttpError | AxiosError | RuntimeError): undefined {
  let error = caughtError;
  const axiosError = (caughtError as AxiosError).isAxiosError && format(caughtError as AxiosError);

  if (!(error instanceof HttpError)) {
    /**
     * It means that error was unexpected and can have unpredictable structure
     * For example, Axios errors have different structure
     * Also, we can send all unexpected errors to Sentry here
     */
    log('This error was not generated by us. We should extract the statusCode, name and message here');

    error = formatUnknownError(error, axiosError);
  }

  /**
   * console.log allows displaying the error message and stack trace
   * But Axios error has complicated structure that doesn't allow debugging it easily
   */
  if (axiosError) {
    console.log(axiosError);
  } else {
    console.log(caughtError);
  }

  /**
   * Serverless supports following status codes:
   * 400  Bad Request
   * 401  Unauthorized
   * 403  Forbidden
   * 404  Not Found
   * 422  Unprocessable Entity
   * 500  Internal Server Error
   * 502  Bad Gateway
   * 504  Gateway Timeout
   */
  error = formatUnsupportedError(error as HttpError | AppError);

  /**
   * The error message looks like: [404] Not Found. User does not exist
   */
  throw `[${(error as AppError).statusCode}] ${error.name}. ${error.message}`;
}

function formatUnknownError(error: Error | HttpError | AxiosError | RuntimeError, axiosError): AppError {
  if (error instanceof RuntimeError) {
    return { statusCode: 500, name: 'Bad request', message: error.message };
  }

  if (axiosError) {
    return {
      statusCode: axiosError.response?.status as ErrorStatusCode,
      message: axiosError.response?.statusText || axiosError.message,
      name: axiosError.response?.statusText || 'Internal Server Error',
    };
  }

  return { statusCode: 500, message: error.message, name: error.name };
}

function formatUnsupportedError(error: AppError | HttpError): AppError {
  if (error.statusCode === 409 || error.statusCode === 429) {
    return { statusCode: 400, message: error.message, name: error.name };
  }
  if (error.statusCode === 503) {
    return { statusCode: 500, message: error.message, name: error.name };
  }

  return error;
}
